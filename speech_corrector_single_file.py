

# === ai.py ===

import os
import dotenv
import re
from typing import List, Tuple
from loguru import logger
from mistralai import Mistral
from mistralai.models import UserMessage

dotenv.load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Mistral ===
API_KEY = os.getenv("MISTRAL_API_KEY")
MODEL_NAME = "mistral-large-latest"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
client = Mistral(api_key=API_KEY)


async def analyze_text_errors_tagged(text: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ Mistral –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –≥–¥–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏ –æ–±—Ä–∞–º–ª–µ–Ω—ã –≤ <–û–®–ò–ë–ö–ê>.

    Args:
        text (str): –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        str: —Ç–µ–∫—Å—Ç —Å –æ–±—Ä–∞–º–ª—ë–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏.
    """

    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö, –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫.
–ï—Å–ª–∏ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –æ—à–∏–±–∫–∞ ‚Äî –æ–±—Ä–∞–º–∏ –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º –≤ —Ç–µ–≥ <–û–®–ò–ë–ö–ê>.
–ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω–∏ —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

–¢–ï–ö–°–¢:
{text}
"""

    try:
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Mistral –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫...")

        messages = [UserMessage(content=prompt)]

        chat_response = await client.chat.complete_async(
            model=MODEL_NAME,
            messages=messages
        )

        content = chat_response.choices[0].message.content.strip()
        return content

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Mistral: {e}")
        return text


async def suggest_correction(sentence: str) -> Tuple[str, str]:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.

    Args:
        sentence (str): –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π

    Returns:
        Tuple[str, str]: (–æ—Ä–∏–≥–∏–Ω–∞–ª, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
    """

    prompt = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:

–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:
{sentence}
"""

    try:
        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Mistral –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...")

        messages = [UserMessage(content=prompt)]

        chat_response = await client.chat.complete_async(
            model=MODEL_NAME,
            messages=messages
        )

        corrected = chat_response.choices[0].message.content.strip()
        return sentence, corrected

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Mistral: {e}")
        return sentence, sentence


def extract_tagged_sentences(tagged_text: str) -> List[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–±—Ä–∞–º–ª—ë–Ω–Ω—ã–µ –≤ <–û–®–ò–ë–ö–ê>...</–û–®–ò–ë–ö–ê>

    Args:
        tagged_text (str): —Ç–µ–∫—Å—Ç —Å —Ç–µ–≥–∞–º–∏

    Returns:
        List[str]: —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏
    """
    pattern = r"<–û–®–ò–ë–ö–ê>(.*?)</–û–®–ò–ë–ö–ê>"
    return [match.strip() for match in re.findall(pattern, tagged_text, re.DOTALL)]

# === telegram_bot.py ===

# telegram_bot.py

import os
import dotenv
from ai import analyze_text_errors_tagged, extract_tagged_sentences, suggest_correction
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import Router, F
from aiogram.filters import Command

dotenv.load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)


# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class CorrectionState(StatesGroup):
    waiting_for_text = State()
    correcting = State()


# === –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_sessions = {}  # {chat_id: {"original_text": ..., "error_sentences": [...], "current_idx": 0, "edited_text": ...}}


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")
    await state.set_state(CorrectionState.waiting_for_text)


@router.message(F.text, CorrectionState.waiting_for_text)
async def process_user_text(message: types.Message, state: FSMContext):
    user_text = message.text
    chat_id = message.chat.id

    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫...")

    tagged_text = await analyze_text_errors_tagged(user_text)  # ‚úÖ await –¥–æ–±–∞–≤–ª–µ–Ω
    error_sentences = extract_tagged_sentences(tagged_text)

    if not error_sentences:
        await message.answer("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_sessions[chat_id] = {
        "original_text": user_text,
        "tagged_text": tagged_text,
        "error_sentences": error_sentences,
        "current_idx": 0,
        "edited_text": user_text,
    }

    await state.set_state(CorrectionState.correcting)
    await send_next_error_sentence(chat_id)


async def send_next_error_sentence(chat_id: int):
    session = user_sessions.get(chat_id)
    if not session or session["current_idx"] >= len(session["error_sentences"]):
        await finish_correction(chat_id)
        return

    current_sentence = session["error_sentences"][session["current_idx"]]

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="suggest"),
         InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")]
    ])

    await bot.send_message(
        chat_id,
        f"üìå –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—à–∏–±–∫–æ–π:\n\n"
        f"<code>{current_sentence}</code>",
        reply_markup=kb,
        parse_mode="HTML"
    )


@router.callback_query(F.data.in_({"suggest", "skip"}))
async def handle_choice(callback: CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    choice = callback.data
    session = user_sessions.get(chat_id)

    if not session:
        await callback.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.")
        return

    current_sentence = session["error_sentences"][session["current_idx"]]

    if choice == "suggest":
        original, corrected = await suggest_correction(current_sentence)  # ‚úÖ await –¥–æ–±–∞–≤–ª–µ–Ω
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept"),
             InlineKeyboardButton(text="‚ùå –û—Å—Ç–∞–≤–∏—Ç—å", callback_data="reject")]
        ])

        await bot.send_message(
            chat_id,
            f"üõ†Ô∏è –í–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n\n"
            f"‚û°Ô∏è <b>–ë—ã–ª–æ:</b> <code>{original}</code>\n"
            f"üü∞ <b>–°—Ç–∞–ª–æ:</b> <code>{corrected}</code>",
            reply_markup=kb,
            parse_mode="HTML"
        )

        session["last_correction"] = (original, corrected)
        await state.set_state(CorrectionState.correcting)
    else:
        session["current_idx"] += 1
        await send_next_error_sentence(chat_id)

    await callback.answer()


@router.callback_query(F.data.in_({"accept", "reject"}))
async def handle_correction(callback: CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    choice = callback.data
    session = user_sessions.get(chat_id)

    if not session or "last_correction" not in session:
        await callback.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return

    original, corrected = session["last_correction"]

    if choice == "accept":
        session["edited_text"] = session["edited_text"].replace(original, corrected, 1)

    session["current_idx"] += 1
    del session["last_correction"]

    await callback.answer()
    await send_next_error_sentence(chat_id)


async def finish_correction(chat_id: int):
    session = user_sessions.pop(chat_id, None)
    if not session:
        return

    edited_text = session["edited_text"]

    await bot.send_message(
        chat_id,
        "üéâ –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!\n\n"
        "üìÑ <b>–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b>\n\n"
        f"<code>{edited_text}</code>",
        parse_mode="HTML"
    )

# === main.py ===

import asyncio
from telegram_bot import dp, bot

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())