import os
import dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import Router, F
from aiogram.filters import Command
from ai import AIGrammarChecker
import re

# === Utility to load dictionary terms and wrap them in text ===
def load_dictionary_terms(path='—Å–ª–æ–≤–∞—Ä—å.txt') -> list:
    try:
        with open(path, encoding='utf-8') as f:
            content = f.read()
        terms = [w.strip(' "\'') for w in re.split(r',\s*', content)]
        return [t for t in terms if t]
    except Exception as e:
        return []

def wrap_terms(text: str, terms: list) -> str:
    # Sort by length descending to avoid partial overlaps
    for term in sorted(terms, key=len, reverse=True):
        if not term:
            continue
        # Escape for regex, allow matching inside text
        pattern = re.escape(term)
        # Only wrap if not already wrapped
        text = re.sub(rf'(?<!\{{\{{\{{)({pattern})(?!\}}\}}\}})', r'{{{{{\1}}}}}', text)
    return text

# Utility to unwrap {{{ }}} wrappers from text
def unwrap_terms(text: str) -> str:
    return re.sub(r'\{\{\{(.*?)\}\}\}', r'\1', text)

dotenv.load_dotenv()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set in environment variables!")
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-–º–æ–¥—É–ª—è ===
checker = AIGrammarChecker()

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class CorrectionState(StatesGroup):
    waiting_for_text = State()
    correcting = State()


# === –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_sessions = {}  # {chat_id: {"original_text": ..., "errors": [...], "current_idx": 0}}


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")
    await state.set_state(CorrectionState.waiting_for_text)


@router.message(F.text, CorrectionState.waiting_for_text)
async def process_user_text(message: types.Message, state: FSMContext):
    user_text = message.text or ""
    chat_id = message.chat.id

    # Load and wrap dictionary terms
    terms = load_dictionary_terms()
    wrapped_text = wrap_terms(user_text, terms)

    await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫...")

    results = checker.check_text_with_explanations(wrapped_text or "")  # [(orig, fixed, explanation), ...]
    error_sentences = [item for item in results if item[0] != item[1]]

    if not error_sentences:
        await message.answer("‚úÖ –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_sessions[chat_id] = {
        "original_text": user_text,
        "errors": error_sentences,
        "current_idx": 0,
    }

    await state.set_state(CorrectionState.correcting)
    await send_next_error(chat_id)


async def send_next_error(chat_id: int):
    session = user_sessions.get(chat_id)
    if not session or session.get("current_idx") is None or session["current_idx"] >= len(session["errors"]):
        await finish_correction(chat_id)
        return

    orig, corrected, explanation = session["errors"][session["current_idx"]]
    # Unwrap for user display
    orig = unwrap_terms(orig)
    corrected = unwrap_terms(corrected)
    explanation = unwrap_terms(explanation)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="suggest"),
         InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")]
    ])

    await bot.send_message(
        chat_id,
        f"üìå –ù–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞:\n\n"
        f"<b>–ë—ã–ª–æ:</b> <code>{orig}</code>\n\n"
        f"<b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b> {explanation}\n\n"
        f"<b>–ö–∞–∫ –±—É–¥–µ—Ç:</b> <code>{corrected}</code>",
        reply_markup=kb,
        parse_mode="HTML"
    )


@router.callback_query(F.data.in_({"suggest", "skip"}))
async def handle_choice(callback: CallbackQuery, state: FSMContext):
    if not callback.message:
        await callback.answer("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    chat_id = callback.message.chat.id
    choice = callback.data
    session = user_sessions.get(chat_id)

    if not session:
        await callback.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.")
        return

    orig, corrected, _ = session["errors"][session["current_idx"]]
    # Unwrap for user display
    orig = unwrap_terms(orig)
    corrected = unwrap_terms(corrected)

    if choice == "suggest":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept"),
             InlineKeyboardButton(text="‚ùå –û—Å—Ç–∞–≤–∏—Ç—å", callback_data="reject")]
        ])

        await bot.send_message(
            chat_id,
            f"üõ†Ô∏è –í–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n\n"
            f"‚û°Ô∏è <b>–ë—ã–ª–æ:</b> <code>{orig}</code>\n"
            f"üü∞ <b>–°—Ç–∞–ª–æ:</b> <code>{corrected}</code>",
            reply_markup=kb,
            parse_mode="HTML"
        )

        session["last_correction"] = (orig, corrected)
    else:
        session["current_idx"] += 1
        await send_next_error(chat_id)

    await callback.answer()


@router.callback_query(F.data.in_({"accept", "reject"}))
async def handle_correction(callback: CallbackQuery, state: FSMContext):
    if not callback.message:
        await callback.answer("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    chat_id = callback.message.chat.id
    choice = callback.data
    session = user_sessions.get(chat_id)

    if not session or "last_correction" not in session:
        await callback.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return

    original, corrected = session["last_correction"]
    # Unwrap for user display
    original = unwrap_terms(original)
    corrected = unwrap_terms(corrected)

    if choice == "accept":
        session["original_text"] = session["original_text"].replace(original, corrected, 1)

    session["current_idx"] += 1
    del session["last_correction"]

    await callback.answer()
    await send_next_error(chat_id)


async def finish_correction(chat_id: int):
    session = user_sessions.pop(chat_id, None)
    if not session:
        return

    edited_text = session["original_text"]
    # Unwrap for user display
    edited_text = unwrap_terms(edited_text)

    await bot.send_message(
        chat_id,
        "üéâ –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!\n\n"
        "üìÑ <b>–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç:</b>\n\n"
        f"<code>{edited_text}</code>",
        parse_mode="HTML"
    )


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())